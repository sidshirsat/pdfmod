// Code generated by MockGen. DO NOT EDIT.
// Source: internal/file/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// ListFiles mocks base method.
func (m *MockFileHandler) ListFiles(dir string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", dir)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFileHandlerMockRecorder) ListFiles(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileHandler)(nil).ListFiles), dir)
}

// RenameFile mocks base method.
func (m *MockFileHandler) RenameFile(filePath, newName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFile", filePath, newName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockFileHandlerMockRecorder) RenameFile(filePath, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockFileHandler)(nil).RenameFile), filePath, newName)
}

// SelectFile mocks base method.
func (m *MockFileHandler) SelectFile(files []os.FileInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFile", files)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFile indicates an expected call of SelectFile.
func (mr *MockFileHandlerMockRecorder) SelectFile(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFile", reflect.TypeOf((*MockFileHandler)(nil).SelectFile), files)
}
