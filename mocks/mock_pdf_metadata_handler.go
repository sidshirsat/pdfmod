// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pdf/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPDFMetadataHandler is a mock of PDFMetadataHandler interface.
type MockPDFMetadataHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPDFMetadataHandlerMockRecorder
}

// MockPDFMetadataHandlerMockRecorder is the mock recorder for MockPDFMetadataHandler.
type MockPDFMetadataHandlerMockRecorder struct {
	mock *MockPDFMetadataHandler
}

// NewMockPDFMetadataHandler creates a new mock instance.
func NewMockPDFMetadataHandler(ctrl *gomock.Controller) *MockPDFMetadataHandler {
	mock := &MockPDFMetadataHandler{ctrl: ctrl}
	mock.recorder = &MockPDFMetadataHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDFMetadataHandler) EXPECT() *MockPDFMetadataHandlerMockRecorder {
	return m.recorder
}

// UpdateMetadata mocks base method.
func (m *MockPDFMetadataHandler) UpdateMetadata(filePath, title, producer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadata", filePath, title, producer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockPDFMetadataHandlerMockRecorder) UpdateMetadata(filePath, title, producer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockPDFMetadataHandler)(nil).UpdateMetadata), filePath, title, producer)
}
