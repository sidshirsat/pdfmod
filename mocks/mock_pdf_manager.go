// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sidshirsat/pdfmod/internal/manager (interfaces: PDFManagerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPDFManagerInterface is a mock of PDFManagerInterface interface.
type MockPDFManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPDFManagerInterfaceMockRecorder
}

// MockPDFManagerInterfaceMockRecorder is the mock recorder for MockPDFManagerInterface.
type MockPDFManagerInterfaceMockRecorder struct {
	mock *MockPDFManagerInterface
}

// NewMockPDFManagerInterface creates a new mock instance.
func NewMockPDFManagerInterface(ctrl *gomock.Controller) *MockPDFManagerInterface {
	mock := &MockPDFManagerInterface{ctrl: ctrl}
	mock.recorder = &MockPDFManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDFManagerInterface) EXPECT() *MockPDFManagerInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPDFManagerInterface) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockPDFManagerInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPDFManagerInterface)(nil).Execute))
}
