// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sidshirsat/pdfmod/internal/manager (interfaces: Prompter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptUser mocks base method.
func (m *MockPrompter) PromptUser(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptUser", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// PromptUser indicates an expected call of PromptUser.
func (mr *MockPrompterMockRecorder) PromptUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptUser", reflect.TypeOf((*MockPrompter)(nil).PromptUser), arg0)
}
